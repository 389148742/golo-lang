Basics
------

Hello world
~~~~~~~~~~~

Golo source code need to be placed in _modules_. Module names are
separated with dots, as in:

-----------
Foo
foo.Bar
foo.bar.Baz
(...)
-----------

It is suggested yet not enforced that the first elements in a module
name are in lowercase, and that the last one have an uppercase first
letter.

A Golo module can be executable if it has a _function_ named `main` and
that takes an argument for the JVM program arguments:

------------------------- 
module hello.World

function main = |args| {
  println("Hello world!")
}
-------------------------

`println` is a predefined function that outputs a value to the standard
console. As you can easily guess, here we output `Hello, world!` and
that is an awesome achievement.

Running _"Hello world"_ with `gologolo`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Of course, we need to run this incredibly complex application.

Golo comes with a `gologolo` script found in the distribution `bin/`
folder. Provided that it is available from your current `$PATH`, you may
simply invoke it as follows:

----------------------------------
$ gologolo samples/helloworld.golo
Hello world!
$
----------------------------------

`gologolo` takes several Golo source files as input. It expects the last
one to have a `main` function to call. The Golo code is compiled on the
fly and executed straight into a JVM.

You may also pass arguments to the `main` function by appending `--args`
on the command line invocation. Suppose that we have a module `EchoArgs`
as follows:

------------------------------------------------- 
module EchoArgs

function main = |args| {
  for (var i = 0, i < alength(args), i = i + 1) {
    println("#" + i + " -> " + aget(args, i))
  }
}
-------------------------------------------------

We may invoke it as follows:

-----------------------------------------------------
$ gologolo samples/echo-args.golo --args plop da plop
#0 -> plop
#1 -> da
#2 -> plop
$
-----------------------------------------------------

Note that `args` is expected to be an array, and we can use built-in
functions to deal with it: `alength` gives the length of an array while
`aget` gives the value of an element at a given index.

Compiling Golo source code
~~~~~~~~~~~~~~~~~~~~~~~~~~

Golo comes with a `goloc` compiler that generates JVM bytecode in
`.class` files. We will give more details in the chapter on
interoperability with Java.

Compiling Golo files is straightforward:

-----------------------------------------------
$ goloc -output classes samples/helloworld.golo
$
-----------------------------------------------

This compiles the code found in `samples/helloworld.golo` and outputs
the generated classes to a `classes` folder (it will be created if
needed):

-------------------
$ tree classes/
classes/
└── hello
    └── World.class

1 directory, 1 file
$
-------------------

Running compiled Golo code
~~~~~~~~~~~~~~~~~~~~~~~~~~

Golo provides a `golo` command for running compiled Golo code:

------------------
$ cd classes
$ golo hello.World
Hello world!
$
------------------

Simple, isn't it?

Variables and constants
~~~~~~~~~~~~~~~~~~~~~~~

Golo does not check for types at compile time, and they are not
declared. Everything happens at runtime in Golo.

Variables are declared using the `var` keyword, while constants are
declared with `let`. It is strongly advised that you favour `let` over
`var` unless you are certain that you need mutability.

Variables and constants need to be initialized when declared. Failing to
do so results in a compilation error.

Here are a few examples:

-----------------------------------------------------------------
# Ok
var i = 3
i = i + 1

# The assignment fails because truth is a constant
let truth = 42
truth = 666

# Invalid statement, variables / constants have to be initialized
var foo
-------------------------------------------------------------------------

Data literals
~~~~~~~~~~~~~

`null`::
  `null`
Boolean::
  `true`
  +
  `false`
String::
  `"hello world"`
  +
  ...
Integer::
  `123`
  +
  `-123`
  +
  ...
Long::
  `123_L`
  +
  `-123_L`
  +
  ... +
Double::
  `1.234`
  +
  `-1.234`
  +
  `1.234e9`
  +
  ...
Float::
  `1.234_F`
  +
  `-1.234_F`
  +
  `1.234e9_F`
  +
  ...
Class::
  `String.class`
  +
  `java.lang.String.class`
  +
  ...

