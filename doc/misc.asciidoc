== Misc. modules

Not everything fits into the main documentation. We encourage you to also look at the _javadocs_
and _golodocs_.

The next subsections provide summaries of misc. modules found as part of Golo.

=== JSON support (`gololang.JSON`)

Golo includes the https://code.google.com/p/json-simple/[JSON Simple] library to provide JSON
support.

While `json-simple` only supports encoding from lists and maps, this API brings support for sets,
arrays, Golo tuples, dynamic objects and structs.

Given a simple data structure, we can obtain a JSON representation:

[source,golo]
----
let data = map[
  ["name", "Somebody"],
  ["age", 69],
  ["friends", list[
    "Mr Bean", "John B", "Larry"
  ]]
]
let asText = JSON.stringify(data)
----

Given some JSON as text, we can get back a data structure:

[source,golo]
----
let data = JSON.parse(text)
println(data: get("name"))
----

The `gololang.JSON` module also provides helpers for JSON serialization and deserialization
with both dynamic objects and structs.

=== Scala-like dynamic variable (`gololang.DynamicVariable`)

Golo has a `DynamicVariable` type that mimics the eponymous class from the Scala standard library.

A dynamic variable has inheritable thread-local semantics: updates to its value are confined to the
current thread and its future child threads.

Given the following code:

[source,golo]
----
let dyn = DynamicVariable("Foo")
println(dyn: value())

let t1 = Thread({
  dyn: withValue(666, {
    println(dyn: value())
  })
})

let t2 = Thread({
  dyn: withValue(69, {
    println(dyn: value())
  })
})

t1: start()
t2: start()
t1: join()
t2: join()
println(dyn: value())
----

one gets an output similar to:

----
Foo
69
666
Foo
----

with the `69` and `666` swapping order over runs.

=== Observable references (`gololang.Observable`)

An observable value notifies observers of updates in a thread-safe manner. An observable can also be
constructed from another observable using the `map` and `filter` combinators:

[source,golo]
----
let foo = Observable("Foo")
foo: onChange(|v| -> println("foo = " + v))

let mapped = foo: map(|v| -> v + "!")
mapped: onChange(|v| -> println("mapped = " + v))

foo: set("69")
----

This yields the following output:

----
foo = 69
mapped = 69!
----



