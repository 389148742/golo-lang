# Golo backlog

Not everything is deemed to be implemented...

## Language

* Support invocations with either () or {}? Could be fun for DSL-style constructs.

* Annotations.

* Allow underscores in number literals.

* Classes and value types. Provide polymorphism through dynamic casts and codegen in an IAdapter
  style.

* Ability to define classes and / or data objects.
  Must be lightweight, and complex use-cases should be done in POJOs.

* String templates, e.g. `"Hello #{foo} #{Bar.baz()}!"` or `"Current time: #{System.currentTime()}"`.

* Pimps / categories, e.g.:

    ```
    module foo

    pimp String.class {
      
      method toURL = {
        return URL(this)
      }

      method toFile = {
        return File(this)
      }

      method toFile = |dir| = {
        return File(dir, this)
      }
    }

    (...)

    module bar

    apply pimp from foo on String.class

    function plop = {
      "sample.txt": toFile("/tmp")
    }

    ```

## Runtime

* Common collection sugar functions (lists, maps, sets, ...)

* The inline-cache is slow at the terminal node since every call can yield a new method handle.

## Internals

* Concurrent compilation?

* Look if thread locals could not be judiciously used in some places.

## Tooling

* Try Golo in a web browser.

* Ensure that the generated bytecode helps in the Java debugger.

* Netbeans support (they love JavaCC it seems).

* Maven, Ant, Gradle plugins.

* golodoc.

