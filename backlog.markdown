# Golo backlog

Not everything is deemed to be implemented...

## Language

* Support invocations with either () or {}? Could be fun for DSL-style constructs.

* Annotations.

* SAM methods conversion. (there is some indy support it seems)

* Allow underscores in number literals.

* Classes and value types. Provide polymorphism through dynamic casts in an IAdapter style.

* String templates, e.g. `"Hello #{foo} #{Bar.baz()}!"` or `"Current time: #{System.currentTime()}"`.

* Common collections sugar (lists, maps, sets).

* Pimps / categories, e.g.:

    ```
    module foo

    pimp String.class {
      
      method toURL = {
        return URL(this)
      }

      method toFile = {
        return File(this)
      }

      method toFile = |dir| = {
        return File(dir, this)
      }
    }

    (...)

    module bar

    apply pimp from foo on String.class

    function plop = {
      "sample.txt": toFile("/tmp")
    }

    ```

* Ability to define classes and / or data objects.
  Must be lightweight, and complex use-cases should be done in POJOs.

* Matching, e.g.:
  
    ```
    let result = match {
      when (n oftype Integer.class) and (n < 100) return "An integer below 100"
      when (n oftype Integer.class)               return "An integer"
      when n oftype String.class                  return "A string: #{n}"
      otherwise                                   return "I have no idea"
    }
    ```

* Case, e.g.:

    ```
    case {
      when a > b {
        println("a > b")
      }
      when a isa String.class {
        println("String")
      }
      otherwise {
        raise("WTF is that?")
      }
    }
    ```

* First-class functions and closures, e.g.:

    ```
    # Anonymous function
    let decorate = |str| { return ">> #{str} <<" }
    let plop = decorate
    plop("Mr Bean")

    let s = "plop"
    let m = { return "s = #{s}" }
    println(m())
    ```

## Runtime

* The inline-cache is slow at the terminal node since every call can yield a new method handle.

* MethodType.genericType may simplify some code...

* Proper OSGi meta-data.

## Internals

* Concurrent compilation?

* Look if thread locals could not be judiciously used in some places.

## Tooling

* Try Golo in a web browser.

* Ensure that the generated bytecode helps in the Java debugger.

* Vim syntax.

* Netbeans support (they love JavaCC it seems).

* Generate the image with [AppAssembler](http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program.html)?

