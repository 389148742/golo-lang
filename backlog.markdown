# Golo backlog

Not everything is deemed to be implemented...

## Language

* instanceof-style operator with class literal support.

* Invoke instance methods:
  `list: add(3)`
  `MapMaker(): concurrencyLevel(4): weakKeys(): makeMap()`

* Support varargs in instance method invocations.

* Make sure varargs work in all cases for functions and methods.

* Fix import resolution: `import java.util.Arrays` resolves `asList(...)` while
  `import java.util` does not resolve `Arrays.asList(...)`.

* Throw exceptions.

* Catch exceptions.

* Support doubles, floats.

* SAM methods conversion. (there is some indy support it seems)

* Allow underscores in number literals.

* String templates, e.g. `"Hello #{foo} #{Bar.baz()}!"` or `"Current time: #{System.currentTime()}"`.

* Common collections sugar (lists, maps, sets).

* Ability to define classes and / or data objects.
  Must be lightweight, and complex use-cases should be done in POJOs.

* Matching, e.g.:
  
    ```
    let result = match {
      when (n instanceof Integer) and (n < 100) return "An integer below 100"
      when (n instanceof Integer)               return "An integer"
      when n instanceof String                  return "A string: #{n}"
      otherwise                                 return "I have no idea"
    }
    ```

* Foreach-style iterations, e.g.:

    ```
    foreach value in iterable {
      println(value)
    }

    foreach index, value in array {
      println("#{index} => #{value}")
    }
    ```

* First-class functions and closures, e.g.:

    ```
    # Anonymous function
    let decorate = |str| { return ">> #{str} <<" }
    let plop = decorate
    plop("Mr Bean")

    let s = "plop"
    let m = { return "s = #{s}" }
    println(m())
    ```

## Runtime

* Predefined functions: `print`, `println`, ...

* Live patch (SwitchPoint helps).

* Pre/post-conditions, invariants.

* Proper OSGi meta-data.

## Internals

* Concurrent compilation?

* Look if thread locals could not be judiciously used in some places.

## Tooling

* Ensure that the generated bytecode helps in the Java debugger.

* Vim syntax.

* Netbeans support (they love JavaCC it seems).

