# Golo backlog

Not everything is deemed to be implemented...

## Language

* Instantiating objects with new.

* Invoke instance methods.

* Support doubles, floats, longs, bigint, bigdec.

* Allow underscores in number literals.

* String templates, e.g. `"Hello #{foo} #{Bar.baz()}!"` or `"Current time: #{System.currentTime()}"`.

* Arrays.

* Common collections sugar (lists, maps, sets).

* Ability to define classes and / or data objects.
  Must be lightweight, and complex use-cases should be done in POJOs.

* Matching, e.g.:
  
    ```
    let result = match {
      when (n instanceof Integer) and (n < 100) return "An integer below 100"
      when (n instanceof Integer)               return "An integer"
      when n instanceof String                  return "A string: #{n}"
      otherwise                                 return "I have no idea"
    }
    ```

* Foreach-style iterations, e.g.:

    ```
    foreach value in iterable {
      println(value)
    }

    foreach index, value in array {
      println("#{index} => #{value}")
    }
    ```

* First-class functions and closures, e.g.:

    ```
    # Anonymous function
    let decorate = |str| { return ">> #{str} <<" }
    let plop = decorate
    plop("Mr Bean")

    let s = "plop"
    let m = { return "s = #{s}" }
    println(m())
    ```

## Runtime

* Predefined functions: `print`, `println`, ...

## Tooling

* Compiler shell script.

* Runner shell script.

* Ensure that the generated bytecode helps in the Java debugger.

