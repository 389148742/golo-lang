{"ts":1368454158013,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# ............................................................................................... #\n#\n# Copyright 2012-2013 Institut National des Sciences AppliquÃ©es de Lyon (INSA-Lyon)\n# \n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n# \n#     http://www.apache.org/licenses/LICENSE-2.0\n# \n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# ............................................................................................... #\n\nmodule gololang.StandardAugmentations\n\n# ............................................................................................... #\n\naugment java.lang.invoke.MethodHandle {\n\n  function to = |this, interfaceClass| -> asInterfaceInstance(interfaceClass, this)\n\n  function andThen = |this, filter| ->\n    java.lang.invoke.MethodHandles.filterReturnValue(this, filter)\n\n  function bindAt = |this, pos, val| ->\n    java.lang.invoke.MethodHandles.insertArguments(this, pos, val)\n}\n\n# ............................................................................................... #\n\naugment java.util.Collection {\n\n  function newWithSameType = |this| {\n    try {\n      return this: getClass(): newInstance()\n    } catch (e) {\n      if not(e oftype java.lang.InstantiationException.class) {\n        throw e\n      }\n      let fallback = match {\n        when this oftype java.util.RandomAccess.class then java.util.ArrayList()\n        when this oftype java.util.List.class then java.util.LinkedList()\n        when this oftype java.util.Set.class then java.util.HashSet()\n        when this oftype java.util.Map.class then java.util.HashMap()\n        otherwise null\n      }\n      if fallback is null {\n        raise(\"Cannot create a new collection from \" + this: getClass())\n      }\n      return fallback\n    }\n  }\n\n  function reduce = |this, initialValue, func| {\n    var acc = initialValue\n    foreach (element in this) {\n      acc = func(acc, element)\n    }\n    return acc\n  }\n}\n\n# ............................................................................................... #\n\naugment java.util.List {\n\n  function append = |this, element| {\n    this: add(element)\n    return this\n  }\n\n  function prepend = |this, element| {\n    this: add(0, element)\n    return this\n  }\n  \n  function insert = |this, index, element| {\n    this: add(index, element)\n    return this\n  }\n\n  function append = |this, head, tail...| {\n    this: append(head)\n    foreach (element in tail) {\n      this: append(element)\n    }\n    return this\n  }\n\n  function prepend = |this, head, tail...| {\n    for (var i = tail: length() - 1, i >= 0, i = i - 1) {\n      this: prepend(tail: get(i))\n    }\n    return this: prepend(head)\n  }\n\n  function head = |this| -> this: get(0)\n  function tail = |this| -> this: subList(1, this: size())\n  function unmodifiableView = |this| -> java.util.Collections.unmodifiableList(this)\n\n  function filter = |this, pred| {\n    let filtered = this: newWithSameType()\n    foreach (element in this) {\n      if pred(element) {\n        filtered: append(element)\n      }\n    }\n    return filtered\n  }\n\n  function map = |this, func| {\n    let mapped = this: newWithSameType()\n    foreach (element in this) {\n      mapped: append(func(element))\n    }\n    return mapped\n  }\n\n  function each = |this, func| {\n    foreach (element in this) {\n      func(element)\n    }\n  }\n\n  function join = |this, separator| {\n    var buffer = java.lang.StringBuilder(\"\")\n    if not (this: isEmpty()) {      \n      buffer: append(this: head())      \n      let tail = this: tail()      \n      if not (tail: isEmpty()) {\n        buffer: append(separator)      \n        buffer: append(tail: join(separator))\n      }\n    }\n    return buffer: toString()\n  }\n}\n\n# ............................................................................................... #\n\naugment java.util.Set {\n   \n  function include = |this, element| {\n    this: add(element)\n    return this\n  }\n\n  function exclude = |this, element| {\n    this: remove(element)\n    return this\n  }\n\n  function include = |this, first, rest...| {\n    this: add(first)\n    foreach (element in rest) {\n      this: add(element)\n    }\n    return this\n  }\n\n  function exclude = |this, first, rest...| {\n    this: remove(first)\n    foreach (element in rest) {\n      this: remove(element)\n    }\n    return this\n  }\n\n  function has = |this, element| -> this: contains(element)\n\n  function has = |this, first, rest...| {\n    if not(this: contains(first)) {\n      return false\n    } else {\n      foreach (element in rest) {\n        if not(this: contains(element)) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  function unmodifiableView = |this| -> java.util.Collections.unmodifiableSet(this)\n\n  function filter = |this, pred| {\n    let filtered = this: newWithSameType()\n    foreach (element in this) {\n      if pred(element) {\n        filtered: include(element)\n      }\n    }\n    return filtered\n  }\n\n  function map = |this, func| {\n    let mapped = this: newWithSameType()\n    foreach (element in this) {\n      mapped: include(func(element))\n    }\n    return mapped\n  }\n\n  function each = |this, func| {\n    foreach (element in this) {\n      func(element)\n    }\n  }\n}\n\n# ............................................................................................... #\n\naugment java.util.Map {\n\n  function add = |this, key, value| {\n    this: put(key, value)\n    return this\n  }\n\n  function delete = |this, key| {\n    this: remove(key)\n    return this\n  }\n\n  function addIfAbsent = |this, key, value| {\n    if not(this: containsKey(key)) {\n      if isClosure(value) {\n        this: put(key, value())\n      } else {\n        this: put(key, value)\n      }\n    }\n    return this\n  }\n\n  function getOrElse = |this, key, replacement| {\n    let value = this: get(key)\n    if value isnt null {\n      return value\n    }\n    if isClosure(replacement) {\n      return replacement()\n    } else {\n      return replacement\n    }\n  }\n\n  function unmodifiableView = |this| -> java.util.Collections.unmodifiableMap(this)\n\n  function newWithSameType = |this| -> this: getClass(): newInstance()\n\n  function filter = |this, pred| {\n    let filtered = this: newWithSameType()\n    foreach (entry in this: entrySet()) {\n      let key = entry: getKey()\n      let value = entry: getValue()\n      if pred(key, value) {\n        filtered: put(key, value)\n      }\n    }\n    return filtered\n  }\n\n  function map = |this, func| {\n    let mapped = this: newWithSameType()\n    foreach (entry in this: entrySet()) {\n      let key = entry: getKey()\n      let value = entry: getValue()\n      let result = func(key, value)\n      mapped: put(result: getKey(), result: getValue())\n    }\n    return mapped\n  }\n\n  function reduce = |this, initialValue, func| {\n    var acc = initialValue\n    foreach (entry in this: entrySet()) {\n      let key = entry: getKey()\n      let value = entry: getValue()\n      acc = func(acc, key, value)\n    }\n    return acc\n  }\n\n  function each = |this, func| {\n    foreach (entry in this: entrySet()) {\n      func(entry: getKey(), entry: getValue())\n    }\n  }\n}\n\n# ............................................................................................... #\n\n"]],"start1":0,"start2":0,"length1":0,"length2":7536}]],"length":7536}
{"contributors":[],"silentsave":false,"ts":1368454740751,"patch":[[{"diffs":[[0,"............ #\n\n"],[1,"augment java.lang.Iterable {\n\n  function reduce = |this, initialValue, func| {\n    var acc = initialValue\n    foreach (element in this) {\n      acc = func(acc, element)\n    }\n    return acc\n  }\n  \n  function each = |this, func| {\n    foreach (element in this) {\n      func(element)\n    }\n  }\n\n}\n\n"],[0,"augment java.uti"]],"start1":1406,"start2":1406,"length1":32,"length2":328},{"diffs":[[0," }\n\n"],[-1,"  function reduce = |this, initialValue, func| {\n    var acc = initialValue\n    foreach (element in this) {\n      acc = func(acc, element)\n    }\n    return acc\n  }\n"],[0,"}\n\n#"]],"start1":2442,"start2":2442,"length1":172,"length2":8},{"diffs":[[0," }\n\n"],[-1,"  function each = |this, func| {\n    foreach (element in this) {\n      func(element)\n    }\n  }\n\n"],[0,"  fu"]],"start1":3735,"start2":3735,"length1":104,"length2":8}]],"length":7572,"saved":false}
{"ts":1368454929316,"patch":[[{"diffs":[[0," }\n\n"],[-1,"  function each = |this, func| {\n    foreach (element in this) {\n      func(element)\n    }\n  }\n"],[0,"}\n\n#"]],"start1":5488,"start2":5488,"length1":103,"length2":8},{"diffs":[[0,"s)\n\n"],[-1,"  function newWithSameType = |this| -> this: getClass(): newInstance()\n\n"],[0,"  fu"]],"start1":6326,"start2":6326,"length1":80,"length2":8}]],"length":7405,"saved":false}
{"ts":1368456841504,"patch":[[{"diffs":[[0,"iableMap(this)\n\n"],[1,"  function newWithSameType = |this| -> this: getClass(): newInstance()\n\n"],[0,"  function filte"]],"start1":6314,"start2":6314,"length1":32,"length2":104}]],"length":7477,"saved":false}
{"ts":1368456843024,"patch":[[{"diffs":[[0," mapped\n  }\n"],[-1,"\n"],[0,"}\n\n# ......."]],"start1":5479,"start2":5479,"length1":25,"length2":24}]],"length":7476,"saved":false}
{"ts":1368456916315,"patch":[[{"diffs":[[0,"ations\n\n"],[1,"\nlocal function _newWithSameType = |this| {\n    try {\n      return this: getClass(): newInstance()\n    } catch (e) {\n      if not(e oftype java.lang.InstantiationException.class) {\n        throw e\n      }\n      let fallback = match {\n        when this oftype java.util.RandomAccess.class then java.util.ArrayList()\n        when this oftype java.util.List.class then java.util.LinkedList()\n        when this oftype java.util.Set.class then java.util.HashSet()\n        when this oftype java.util.Map.class then java.util.HashMap()\n        otherwise null\n      }\n      if fallback is null {\n        raise(\"Cannot create a new collection from \" + this: getClass())\n      }\n      return fallback\n    }\n  }\n  \n"],[0,"# ......"]],"start1":869,"start2":869,"length1":16,"length2":720}]],"length":8180,"saved":false}
{"ts":1368456940686,"patch":[[{"diffs":[[0,"is| "],[-1,"{\n    try {\n      return this: getClass(): newInstance()\n    } catch (e) {\n      if not(e oftype java.lang.InstantiationException.class) {\n        throw e\n      }\n      let fallback = match {\n        when this oftype java.util.RandomAccess.class then java.util.ArrayList()\n        when this oftype java.util.List.class then java.util.LinkedList()\n        when this oftype java.util.Set.class then java.util.HashSet()\n        when this oftype java.util.Map.class then java.util.HashMap()\n        otherwise null\n      }\n      if fallback is null {\n        raise(\"Cannot create a new collection from \" + this: getClass())\n      }\n      return fallback\n    }\n  }"],[1,"-> _newWithSameType(this)"],[0,"\n\n}\n"]],"start1":2486,"start2":2486,"length1":666,"length2":33}]],"length":7547,"saved":false}
{"ts":1368456955449,"patch":[[{"diffs":[[0," -> "],[-1,"this: getClass(): newInstance("],[1,"_newWithSameType(this"],[0,")\n\n "]],"start1":6435,"start2":6435,"length1":38,"length2":29}]],"length":7538,"saved":false}
{"ts":1368457109689,"patch":[[{"diffs":[[0,"s\n\n\n"],[-1,"local "],[0,"func"]],"start1":874,"start2":874,"length1":14,"length2":8}]],"length":7532,"saved":false}
{"ts":1368457370311,"patch":[[{"diffs":[[0,"unction "],[-1,"_"],[0,"newWithS"]],"start1":879,"start2":879,"length1":17,"length2":16}]],"length":7531,"saved":false}
{"ts":1368457381741,"patch":[[{"diffs":[[0,"ype = |this| -> "],[-1,"_"],[0,"newWithSameType("]],"start1":2470,"start2":2470,"length1":33,"length2":32}]],"length":7530,"saved":false}
{"ts":1368457409816,"patch":[[{"diffs":[[0,"his| -> "],[1,"gololang.StandardAugmentations."],[0,"newWithS"]],"start1":2478,"start2":2478,"length1":16,"length2":47}]],"length":7561,"saved":false}
{"ts":1368457420494,"patch":[[{"diffs":[[0," -> "],[-1,"_"],[1,"gololang.StandardAugmentations."],[0,"newW"]],"start1":6458,"start2":6458,"length1":9,"length2":39}]],"length":7591,"saved":false}
{"ts":1368457587758,"patch":[[{"diffs":[[0,"this| {\n"],[-1,"    "],[0,"try {\n  "]],"start1":906,"start2":906,"length1":20,"length2":16}]],"length":7587,"saved":false}
{"ts":1368457588665,"patch":[[{"diffs":[[0,"this| {\n"],[1," "],[0,"try {\n  "]],"start1":906,"start2":906,"length1":16,"length2":17}]],"length":7588,"saved":false}
{"ts":1368457589701,"patch":[[{"diffs":[[0,"this| {\n"],[1," "],[0," try {\n "]],"start1":906,"start2":906,"length1":16,"length2":17}]],"length":7589,"saved":false}
{"ts":1368457593902,"patch":[[{"diffs":[[0,"  try {\n    "],[-1,"  "],[0,"return this:"]],"start1":914,"start2":914,"length1":26,"length2":24},{"diffs":[[0,"tance()\n"],[-1,"    "],[0,"} catch "]],"start1":957,"start2":957,"length1":20,"length2":16}]],"length":7583,"saved":false}
{"ts":1368457595417,"patch":[[{"diffs":[[0,"tance()\n"],[1,"  "],[0,"} catch "]],"start1":957,"start2":957,"length1":16,"length2":18}]],"length":7585,"saved":false}
{"ts":1368457598484,"patch":[[{"diffs":[[0,"h (e) {\n    "],[-1,"  "],[0,"if not(e oft"]],"start1":973,"start2":973,"length1":26,"length2":24}]],"length":7583,"saved":false}
{"ts":1368457600305,"patch":[[{"diffs":[[0,"    "],[-1,"  "],[0,"throw e\n"],[-1," "],[0,"    "]],"start1":1045,"start2":1045,"length1":19,"length2":16}]],"length":7580,"saved":false}
{"ts":1368457601465,"patch":[[{"diffs":[[0,"throw e\n    "],[-1," "],[0,"}\n      let "]],"start1":1049,"start2":1049,"length1":25,"length2":24}]],"length":7579,"saved":false}
{"ts":1368457604126,"patch":[[{"diffs":[[0,"e\n    }\n    "],[-1,"  "],[0,"let fallback"]],"start1":1055,"start2":1055,"length1":26,"length2":24}]],"length":7577,"saved":false}
{"ts":1368457607696,"patch":[[{"diffs":[[0,"tch {\n      "],[-1,"  "],[0,"when this of"]],"start1":1084,"start2":1084,"length1":26,"length2":24}]],"length":7575,"saved":false}
{"ts":1368457610702,"patch":[[{"diffs":[[0,"rayList()\n      "],[-1,"  "],[0,"when this oftype"]],"start1":1159,"start2":1159,"length1":34,"length2":32},{"diffs":[[0,"inkedList()\n"],[-1,"  "],[0,"      when t"]],"start1":1229,"start2":1229,"length1":26,"length2":24}]],"length":7571,"saved":false}
{"ts":1368457612915,"patch":[[{"diffs":[[0,"Set()\n      "],[-1,"  "],[0,"when this of"]],"start1":1303,"start2":1303,"length1":26,"length2":24},{"diffs":[[0,"shMap()\n"],[-1,"  "],[0,"      ot"]],"start1":1369,"start2":1369,"length1":18,"length2":16}]],"length":7567,"saved":false}
{"ts":1368457614032,"patch":[[{"diffs":[[0,"se null\n    "],[-1,"  "],[0,"}\n      if f"]],"start1":1390,"start2":1390,"length1":26,"length2":24}]],"length":7565,"saved":false}
{"ts":1368457618173,"patch":[[{"diffs":[[0,"  }\n    "],[-1,"  "],[0,"if fallb"]],"start1":1400,"start2":1400,"length1":18,"length2":16},{"diffs":[[0,"l {\n    "],[-1,"    r"],[0,"aise(\"Ca"]],"start1":1426,"start2":1426,"length1":21,"length2":16}]],"length":7558,"saved":false}
{"ts":1368457618711,"patch":[[{"diffs":[[0,"l {\n    "],[1,"r"],[0,"aise(\"Ca"]],"start1":1426,"start2":1426,"length1":16,"length2":17}]],"length":7559,"saved":false}
{"ts":1368457619580,"patch":[[{"diffs":[[0,"l {\n    "],[1,"  "],[0,"raise(\"C"]],"start1":1426,"start2":1426,"length1":16,"length2":18}]],"length":7561,"saved":false}
{"ts":1368457622736,"patch":[[{"diffs":[[0,"lass())\n    "],[-1,"  "],[0,"}\n      retu"]],"start1":1493,"start2":1493,"length1":26,"length2":24}]],"length":7559,"saved":false}
{"ts":1368457633346,"patch":[[{"diffs":[[0,")\n    }\n    "],[-1,"  "],[0,"return fallb"]],"start1":1499,"start2":1499,"length1":26,"length2":24},{"diffs":[[0,"allback\n"],[-1,"    "],[0,"}\n  }\n  "]],"start1":1519,"start2":1519,"length1":20,"length2":16}]],"length":7553,"saved":false}
{"ts":1368457634055,"patch":[[{"diffs":[[0,"allback\n"],[1,"  "],[0,"}\n  }\n  "]],"start1":1519,"start2":1519,"length1":16,"length2":18}]],"length":7555,"saved":false}
{"ts":1368457637742,"patch":[[{"diffs":[[0,"ack\n  }\n"],[-1,"  "],[0,"}\n  \n# ."]],"start1":1523,"start2":1523,"length1":18,"length2":16}]],"length":7553,"saved":false}
{"ts":1368457639858,"patch":[[{"diffs":[[0,"ack\n  }\n"],[1," "],[0,"}\n  \n# ."]],"start1":1523,"start2":1523,"length1":16,"length2":17}]],"length":7554,"saved":false}
{"ts":1368457641079,"patch":[[{"diffs":[[0,"ack\n  }\n"],[-1," "],[0,"}\n  \n# ."]],"start1":1523,"start2":1523,"length1":17,"length2":16}]],"length":7553,"saved":false}
