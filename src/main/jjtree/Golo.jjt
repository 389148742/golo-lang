// ............................................................................................. //

options {
  MULTI=true;
  VISITOR=true;
  STATIC=false;
}

// ............................................................................................. //

PARSER_BEGIN(GoloParser)

package gololang.compiler.parser;

import java.util.List;
import java.util.LinkedList;
import java.util.Collections;

public class GoloParser {
  
  public static void main(String[] args) throws Throwable {
    GoloParser parser = new GoloParser(System.in);    
    // ASTCompilationUnit unit = parser.CompilationUnit();
    ASTFunctionDeclaration unit = parser.FunctionDeclaration();
    unit.dump("% ");
  }
}

PARSER_END(GoloParser)

// ............................................................................................. //

// White space
SKIP :
{
  " "
  | "\t"
  | "\r"
  | "\f"
}

TOKEN :
{
  < NEWLINE: "\n" >
}

// Keywords
TOKEN :
{
  < MODULE: "module" >
  |
  < IMPORT: "import" >
  |
  < FUNCTION: "function" >
}

// Identifiers
TOKEN :
{
  < IDENTIFIER: <LETTER> (<ID_REST>)* >
  |
  < #LETTER: [ "A"-"Z", "a"-"z", "_" ] >
  |
  < #ID_REST: [ "A"-"Z", "a"-"z", "_", "0"-"9" ] >
}

// ............................................................................................. //

void BlankLines() #void: {}
{
  ( <NEWLINE> )*
}

String QualifiedName() #void:
{
  Token rootToken;
  Token nextToken;
  StringBuilder nameBuilder;
}
{
  rootToken=<IDENTIFIER>
  {
    nameBuilder = new StringBuilder(rootToken.image);
  }
  (
    "." nextToken=<IDENTIFIER>
    {
      nameBuilder.append(".").append(nextToken.image);
    }
  )*
  {
    return nameBuilder.toString();
  }
}

List<String> ArgumentDeclarationList() #void:
{
  Token rootToken;
  Token nextToken;
  List<String> arguments = new LinkedList<String>();
}
{
  "|"
  rootToken=<IDENTIFIER>
  {
    arguments.add(rootToken.image);
  }
  (
    "," (<NEWLINE>)? nextToken=<IDENTIFIER>
    {
      arguments.add(nextToken.image);
    }
  )*
  "|"
  {
    return arguments;
  }
}

// ............................................................................................. //

ASTCompilationUnit CompilationUnit(): {}
{
  BlankLines()
  ModuleDeclaration()
  BlankLines()
  ( ImportDeclaration() BlankLines() )*
  ( FunctionDeclaration() BlankLines() )*
  <EOF>  
  { return jjtThis; }
}

void ModuleDeclaration():
{
  String name;
}
{
  <MODULE> name=QualifiedName()
  {
    jjtThis.setName(name);
  }
}

void ImportDeclaration():
{
  String name;
}
{
  <IMPORT> name=QualifiedName()
  {
    jjtThis.setName(name);
  }
}

void Function():
{
  List<String> arguments = null;
}
{
  (arguments=ArgumentDeclarationList())? (<NEWLINE>)? Block()
  {
    if (arguments == null) {
      arguments = Collections.emptyList();
    }
    jjtThis.setArguments(arguments);
  }
}

ASTFunctionDeclaration FunctionDeclaration():
{
  Token name;
}
{
  <FUNCTION> name=<IDENTIFIER> "=" Function()
  {
    jjtThis.setName(name.image);
    return jjtThis;
  }
}

void Block(): {}
{
  "{" BlankLines() "}"
}

// ............................................................................................. //
