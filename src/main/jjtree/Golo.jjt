/*
 * Copyright 2012-2013 Institut National des Sciences Appliqu√©es de Lyon (INSA-Lyon)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ............................................................................................. //

options {
  MULTI = true;
  VISITOR = true;
  STATIC = false;
  NODE_CLASS = "GoloASTNode";
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
  TOKEN_EXTENDS = "fr.insalyon.citi.golo.compiler.parser.GoloTokenBase";
  TRACK_TOKENS = true;
  COMMON_TOKEN_ACTION = true;
}

// ............................................................................................. //

PARSER_BEGIN(GoloParser)

package fr.insalyon.citi.golo.compiler.parser;

import java.util.List;
import java.util.LinkedList;
import java.util.Collections;

import fr.insalyon.citi.golo.compiler.utils.StringUnescaping;

public class GoloParser {

  public static class ParserClassRef {

    public String name;

    public ParserClassRef(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return "Class<" + name + ">";
    }
  }

  public static class FunctionRef {
    
    public String module;
    public String name;

    public FunctionRef(String module, String name) {
      this.module = module;
      this.name = name;
    }

    @Override
    public String toString() {
      return "FunctionRef{module=" + module + ",name=" + name + "}";
    }
  }
  
  public static void main(String[] args) throws Throwable {
    GoloParser parser = new GoloParser(System.in);    
    // ASTCompilationUnit unit = parser.CompilationUnit();
    ASTFunctionDeclaration unit = parser.FunctionDeclaration();
    unit.dump("% ");
  }
}

PARSER_END(GoloParser)

// ............................................................................................. //

// White space
SKIP :
{
  " "
  | "\t"
  | "\r"
  | "\f"
}

TOKEN :
{
  < NEWLINE: "\n" >
}

// Escaping
SKIP :
{
  < ESCAPE: "`" > : ESCAPED
}

// Keywords
TOKEN :
{
  < MODULE: "module" >
  |
  < IMPORT: "import" >
  |
  < FUNCTION: "function" >
  |
  < LOCAL: "local" >
  |
  < RETURN: "return" >
  |
  < IF: "if" >
  |
  < ELSE: "else" >
  |
  < WHILE: "while" >
  |
  < FOR: "for" >
  |
  < FOREACH: "foreach">
  |
  < IN: "in" >
  |
  < THROW: "throw" >
  |
  < TRY: "try" >
  |
  < CATCH: "catch" >
  |
  < FINALLY: "finally" >
  |
  < CASE: "case" >
  |
  < WHEN: "when" >
  |
  < MATCH: "match" >
  |
  < THEN: "then" >
  |
  < OTHERWISE: "otherwise" >
  |
  < PIMP: "pimp" >
}

// Operators
TOKEN :
{
  < ASSOCIATIVE_OPERATOR: ("*" | "/" | "%" |
                           "<" | "<=" | "==" | "!=" | ">" | ">=" | 
                           "is" | "isnt" |
                           "oftype" ) >
  |
  < COMMUTATIVE_OPERATOR: ("+" | "-" |
                           "and" | "or") >
  |
  < UNARY_OPERATOR: "not" >
}

// References
TOKEN :
{
  < VAR: "var" >
  |
  < LET: "let" >
}

// Literals
TOKEN :
{
  < NUMBER: ("-")? ["0"-"9"] (["0"-"9"])* >
  |
  < LONG_NUMBER: <NUMBER> "_L" >
  |
  < FLOATING_NUMBER: ("-")? (["0"-"9"])+ ("." (["0"-"9"])+)? ("e" (["0"-"9"])+)? >
  |
  < FLOAT: <FLOATING_NUMBER> "_F" >
  |
  < STRING: "\"" (
    (~["\"", "\\", "\n", "\r"])
    |
    ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""]) )
  )* "\"" >
  |
  < CHAR: "'" (~["\n", "\r", "\""]) "'" >
  |
  < NULL: "null" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < CLASSREF: <IDENTIFIER> ("." <IDENTIFIER>)* (".class" | ".module") >
  |
  < FUNREF: "^" (<IDENTIFIER> ("." <IDENTIFIER>)* "::")? <IDENTIFIER> >
}

// Identifiers
<DEFAULT,ESCAPED>
TOKEN :
{
  < IDENTIFIER: <LETTER> (<ID_REST>)* > : DEFAULT
  |
  < #LETTER: [ "A"-"Z", "a"-"z", "_", "$" ] >
  |
  < #ID_REST: [ "A"-"Z", "a"-"z", "_", "$", "0"-"9" ] >
}

// Comments
TOKEN :
{
  < COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n") >
}

TOKEN_MGR_DECLS :
{
    public static interface TokenCompleter {
        void completeToken(Token t);
    }
    public TokenCompleter tokenCompleter = null;
    
    void CommonTokenAction(Token t) {
        if (tokenCompleter != null) {
            tokenCompleter.completeToken(t);
        }
    }
}

// ............................................................................................. //

void BlankLine() #void:{}
{
  ( <NEWLINE> | <COMMENT> )
}

void BlankLines() #void: {}
{
  (BlankLine())*
}

String QualifiedName() #void:
{
  Token rootToken;
  Token nextToken;
  StringBuilder nameBuilder;
}
{
  rootToken=<IDENTIFIER>
  {
    nameBuilder = new StringBuilder(rootToken.image);
  }
  (
    "." nextToken=<IDENTIFIER>
    {
      nameBuilder.append(".").append(nextToken.image);
    }
  )*
  {
    return nameBuilder.toString();
  }
}

List<String> Arguments() #void:
{
  Token rootToken;
  Token nextToken;
  List<String> arguments = new LinkedList<String>();
}
{
  rootToken=<IDENTIFIER>
  {
    arguments.add(rootToken.image);
  }
  (
    "," (BlankLine())? nextToken=<IDENTIFIER>
    {
      arguments.add(nextToken.image);
    }
  )*
  {
    return arguments;
  }
}

String StringLiteral() #void:
{
  Token literal;
}
{
  literal=<STRING>
  {
    return StringUnescaping.unescape(literal.image.substring(1, literal.image.length() - 1));
  }
}

Character CharLiteral() #void:
{
  Token literal;
}
{
  literal=<CHAR>
  {
    return Character.valueOf(literal.image.charAt(1));
  }
}

Long LongLiteral() #void:
{
  Token literal;
}
{
  literal=<LONG_NUMBER>
  {
    return Long.valueOf(literal.image.substring(0, literal.image.length() - 2));
  }
}

Integer IntegerLiteral() #void:
{
  Token literal;
}
{
  literal=<NUMBER>
  {
    return Integer.valueOf(literal.image);
  }
}

GoloParser.ParserClassRef ClassLiteral() #void:
{
  Token literal;
}
{
  literal=<CLASSREF>
  {
    String image = literal.image;
    int suffixLength = image.endsWith("class") ? 6 : 7;
    return new GoloParser.ParserClassRef(image.substring(0, image.length() - suffixLength));
  }
}

Double DoubleLiteral() #void:
{
  Token literal;
}
{
  literal=<FLOATING_NUMBER>
  {
    return Double.valueOf(literal.image);
  }
}

Float FloatLiteral() #void:
{
  Token literal;
}
{
  literal=<FLOAT>
  {
    return Float.valueOf(literal.image.substring(0, literal.image.length() - 2));
  }
}

GoloParser.FunctionRef FunctionRef() #void:
{
  Token literal;
}
{
  literal=<FUNREF>
  {
    String image = literal.image.substring(1);
    String[] parts = image.split("::");
    if (parts.length > 1) {
      return new GoloParser.FunctionRef(parts[0], parts[1]);
    } else {
      return new GoloParser.FunctionRef(null, parts[0]);
    }
  }
}

// ............................................................................................. //

ASTCompilationUnit CompilationUnit(): {}
{
  BlankLines()
  ModuleDeclaration()
  BlankLines()
  ( ImportDeclaration() BlankLines() )*
  ( (PimpDeclaration() | FunctionDeclaration()) BlankLines() )*
  <EOF>  
  { return jjtThis; }
}

void ModuleDeclaration():
{
  Token token;
  String name;
}
{
  token=<MODULE> name=QualifiedName()
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
    jjtThis.setName(name);
  }
}

void ImportDeclaration():
{
  Token token;
  String name;
}
{
  token=<IMPORT> name=QualifiedName()
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
    jjtThis.setName(name);
  }
}

void PimpDeclaration():
{
  Token token;
  String target;
}
{
  token=<PIMP> target=QualifiedName() "{" BlankLines()
    ( FunctionDeclaration() BlankLines() )* 
  "}"
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
    jjtThis.setTarget(target);
    for (int i = 0; i < jjtThis.jjtGetNumChildren(); i++) {
      ASTFunctionDeclaration func = (ASTFunctionDeclaration) jjtThis.jjtGetChild(i);
      if (func.isLocal()) {
        throw new TokenMgrError("Error: pimp function " + 
          func.getName() + 
          " on " + 
          target + 
          " is declared as local", 0);
      }
      func.setPimp(true);
      ASTFunction body = (ASTFunction) func.jjtGetChild(0);
      if (body.getArguments().isEmpty()) {
        throw new TokenMgrError("Error: pimp function " +
          func.getName() +
          " on " + 
          target + 
          " must take at least 1 argument ('this' would be a good idea...)", 0);
      }
    }
  }
}

ASTFunctionDeclaration FunctionDeclaration():
{
  Token token;
  Token name;
  Token local = null;
}
{
  (local=<LOCAL>)?
  {
    if (local != null) {
      jjtThis.setLocal(true);
    }
  }
  token=<FUNCTION> name=<IDENTIFIER> "=" Function()
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
    jjtThis.setName(name.image);
    return jjtThis;
  }
}

// ............................................................................................. //

void Statement() #void:{}
{
  BlankLine() 
  |
  LOOKAHEAD(2) Assignment()
  |
  ExpressionStatement()
  | 
  Return() 
  |
  LetOrVar()
  |
  ConditionalBranching()
  |
  WhileLoop()
  |
  ForLoop()
  |
  ForEachLoop()
  |
  Throw()
  |
  TryCatchFinally()
  |
  Case()
}

void Throw():
{
  Token token;
}
{
  token=<THROW> (BlankLine())? ExpressionStatement()
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}

void WhileLoop():
{
  Token token;
}
{
  token=<WHILE> ExpressionStatement() "{" Block() "}"
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}

void ForLoop():
{
  Token token;
}
{
  token=<FOR> "("  (BlankLine())? LetOrVar() ","
                   (BlankLine())? ExpressionStatement() "," 
                   (LOOKAHEAD(1) BlankLine())? Statement() ")"
  "{" Block() "}"
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}

void ForEachLoop():
{
  Token token;
  Token elementId;
}
{
  token=<FOREACH> "(" elementId=<IDENTIFIER> <IN> ExpressionStatement() ")" "{" Block() "}"
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
    jjtThis.setElementIdentifier(elementId.image);
  }
}

void TryCatchFinally():
{
  Token token;
  Token exceptionId;
}
{
  token=<TRY> "{" Block() "}" 
  (
    (
      <FINALLY> "{" Block() "}"
      {
        jjtThis.setExceptionId(null);
        jjtThis.setLineInSourceCode(token.beginLine);
        jjtThis.setColumnInSourceCode(token.beginColumn);
      }
    )
    |
    (
      <CATCH> "(" exceptionId=<IDENTIFIER> ")" "{" Block() "}"
      (<FINALLY> "{" Block() "}")?
      {
        jjtThis.setExceptionId(exceptionId.image);
        jjtThis.setLineInSourceCode(token.beginLine);
        jjtThis.setColumnInSourceCode(token.beginColumn);
      }
    )
  )
}

void ExpressionStatement() #void: {}
{
  CommutativeExpression() 
}

void TerminalExpression() #void: {}
{
  LOOKAHEAD(2) FunctionInvocation()
  |
  LOOKAHEAD(2) Reference()
  |
  Match()
  |
  Literal()
  |
  Function()
}

void UnaryExpression():
{
  Token token;
}
{
  token=<UNARY_OPERATOR> CommutativeExpression()
  {
    jjtThis.setOperator(token.image);
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}

void CommutativeExpression():
{
  Token token;
}
{
  AssociativeExpression()
  (
    LOOKAHEAD(2) (BlankLine())? token=<COMMUTATIVE_OPERATOR> (BlankLine())? AssociativeExpression()
    {
      jjtThis.addOperator(token.image);
      jjtThis.addLine(token.beginLine);
      jjtThis.addColumn(token.beginColumn);
    }
  )*
}

void AssociativeExpression():
{
  Token token;
}
{
  (
    "(" (BlankLine())? CommutativeExpression() (BlankLine())? ")"
    |
    TerminalExpression()
    |
    UnaryExpression()
  )
  (LOOKAHEAD(1) BlankLine())?
  (
    LOOKAHEAD(2)
    (
      token=<ASSOCIATIVE_OPERATOR> (BlankLine())? AssociativeExpression()
      {
        jjtThis.addOperator(token.image);
        jjtThis.addLine(token.beginLine);
        jjtThis.addColumn(token.beginColumn);
      }
    |
      (BlankLine())? token=":" (BlankLine())? MethodInvocation()
      {
        jjtThis.addOperator(token.image);
        jjtThis.addLine(token.beginLine);
        jjtThis.addColumn(token.beginColumn);
      }
    )
  )*
  (LOOKAHEAD(1) BlankLine())?
}

void MethodInvocation():
{
  Token token;
}
{
  token=<IDENTIFIER> "("  (BlankLine())? (Expressions())? ")"
  {
    jjtThis.setName(token.image);
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}


void Block(): {}
{
  (Statement())*
}

void Function():
{
  Token token;
  List<String> arguments = null;
  Token varargsToken = null;
  boolean compactForm = false;
}
{
  ("|" arguments=Arguments() (varargsToken="...")? "|")? 
  (
    (token="{" Block() "}")
    |
    (token="->" (BlankLine())? ExpressionStatement())
    {
      compactForm = true;
    }
  )
  {
    if (arguments == null) {
      arguments = Collections.emptyList();
    }
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
    jjtThis.setCompactForm(compactForm);
    jjtThis.setArguments(arguments);
    jjtThis.setVarargs(varargsToken != null);
  }
}

void Literal():
{
  Object value;
}
{
  (
    value=ClassLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=StringLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=CharLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=FloatLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=DoubleLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=LongLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    value=IntegerLiteral()
    {
      jjtThis.setLiteralValue(value);
    }
    |
    <NULL>
    {
      jjtThis.setLiteralValue(null);
    }
    |
    <TRUE>
    {
      jjtThis.setLiteralValue(Boolean.TRUE);
    }
    |
    <FALSE>
    {
      jjtThis.setLiteralValue(Boolean.FALSE);
    }    
    |
    value=FunctionRef()
    {
      jjtThis.setLiteralValue(value);
    }
  )
}

void Reference():
{
  Token token;
}
{
  token=<IDENTIFIER>
  {
    jjtThis.setName(token.image);
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}

void LetOrVar():
{
  Token idToken;
}
{
  <LET> idToken=<IDENTIFIER> "="  (BlankLine())? ExpressionStatement()
  {
    jjtThis.setType(ASTLetOrVar.Type.LET);
    jjtThis.setName(idToken.image);
    jjtThis.setLineInSourceCode(idToken.beginLine);
    jjtThis.setColumnInSourceCode(idToken.beginColumn);
  }
  |
  <VAR> idToken=<IDENTIFIER> "="  (BlankLine())? ExpressionStatement()
  {
    jjtThis.setType(ASTLetOrVar.Type.VAR);
    jjtThis.setName(idToken.image);
    jjtThis.setLineInSourceCode(idToken.beginLine);
    jjtThis.setColumnInSourceCode(idToken.beginColumn);
  }
}

void Assignment():
{
  Token idToken;
}
{
  idToken=<IDENTIFIER> "="  (BlankLine())? ExpressionStatement()
  {
    jjtThis.setName(idToken.image);
    jjtThis.setLineInSourceCode(idToken.beginLine);
    jjtThis.setColumnInSourceCode(idToken.beginColumn);
  }
}

void Return():
{
  Token token;
}
{  
  token=<RETURN> (LOOKAHEAD(2) (BlankLine())? ExpressionStatement())?
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}

void Expressions() #void: {}
{
  ExpressionStatement() ("," (BlankLine())? ExpressionStatement())*
}

void FunctionInvocation():
{
  String name;
  Token token;
}
{
  name=QualifiedName() token="(" (BlankLine())? (Expressions())? ")"
  {
    jjtThis.setName(name);
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}

void ConditionalBranching():
{
  Token token;
}
{
  token=<IF> ExpressionStatement() "{" Block() "}"
  ( LOOKAHEAD( <ELSE> )
    <ELSE>
    (
      ConditionalBranching()
     |
      ( "{" Block() "}" )
    )
  )?
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}

void Case():
{ 
  Token token;
}
{
  token=<CASE> "{" (BlankLine())?
    ( <WHEN> ExpressionStatement() "{" Block() "}" (BlankLine())? )+
    <OTHERWISE> "{" Block() "}" (BlankLine())?
  "}"
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}

void Match():
{ 
  Token token;
}
{
  token=<MATCH> "{" (BlankLine())?
    ( <WHEN> (BlankLine())? ExpressionStatement() (BlankLine())? 
      <THEN> (BlankLine())? ExpressionStatement() (BlankLine())? )+
    <OTHERWISE>  (BlankLine())? ExpressionStatement() (BlankLine())?
  "}"
  {
    jjtThis.setLineInSourceCode(token.beginLine);
    jjtThis.setColumnInSourceCode(token.beginColumn);
  }
}

// ............................................................................................. //
